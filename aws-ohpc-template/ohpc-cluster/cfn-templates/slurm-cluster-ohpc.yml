AWSTemplateFormatVersion: 2010-09-09
Description: Complete AWS SLURM Cluster

Parameters:

  AllocateLoginNode:
    Description: Specify whether to create a login node
    Default: FALSE
    Type: String
    AllowedValues:
      - TRUE
      - FALSE

  S3Bucket:
    Description: S3 bucket containing SLURM config files
    Default: s3://chrdowni-ohpc-slurm-us-east-1
    Type: String
    ConstraintDescription: Must be an existing S3 bucket with the config files already uploaded
    
  KeyName:
    Description: The EC2 Key Pair to allow SSH access to the instance
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: Must be the name of an existing EC2 KeyPair.
    Default: Cloud9
  
  HeadAMI:
    Description: AMI to use for head node.
    Type: String
    Default: ami-06f3be803901d8db5

  HeadInstanceType:
    Description: Instance type to be used for Slurm Headnode/Management Node.
    Type: String
    Default: m5.2xlarge
    AllowedValues:
      - c5.2xlarge
      - m5.2xlarge
      - r5.2xlarge

  LoginAMI:
    Description: AMI to use for login node.
    Type: String
    Default: ami-0d66d6a45d2d23420

  LoginInstanceType:
    Description: Instance type to be used for Slurm Headnode/Management Node.
    Type: String
    Default: m5.2xlarge
    AllowedValues:
      - c5.2xlarge
      - m5.2xlarge
      - r5.2xlarge

  ComputeAMI:
    Description: AMI to use for compute nodes.
    Type: String
    Default: ami-005b90c8bed4c1f4f
    
Conditions:

  LoginEnabled:
    !Equals [ !Ref AllocateLoginNode, TRUE ]

Resources:

  ClusterVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value: SLURM cluster VPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: SlurmClusterInternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref ClusterVPC
      InternetGatewayId: !Ref InternetGateway

  ClusterRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref ClusterVPC
      Tags:
        - Key: Name
          Value: ClusterRouteTable
          
  ExternalRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref ClusterVPC
      Tags:
        - Key: Name
          Value: ExternalRouteTable

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref ExternalRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  NATElasticIP:
    DependsOn: AttachGateway
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  ClusterNATGateway:
    DependsOn: ExternalRouteTable
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NATElasticIP.AllocationId
      SubnetId: !Ref ClusterPublicSubnet

  ClusterNATRoute:
    Type: AWS::EC2::Route
    DependsOn: ClusterNATGateway
    Properties:
      RouteTableId: !Ref ClusterRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref ClusterNATGateway

  ExternalAccessSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow SSH Access to Instance
      VpcId: !Ref ClusterVPC
      SecurityGroupIngress:
        IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: SSHAccessSecurityGroup

  ClusterPublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref ClusterVPC
      MapPublicIpOnLaunch: false
      CidrBlock: 10.0.0.0/20
      AvailabilityZone: !Select
        - '0'
        - !GetAZs ''
      Tags:
        - Key: Name
          Value: SLURM Public Subnet
          
  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref ClusterPublicSubnet
      RouteTableId: !Ref ExternalRouteTable

  ClusterSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref ClusterVPC
      MapPublicIpOnLaunch: false
      CidrBlock: 10.0.128.0/20
      AvailabilityZone: !Select
        - '0'
        - !GetAZs ''
      Tags:
        - Key: Name
          Value: SlurmSubnetA

  ClusterSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref ClusterSubnetA
      RouteTableId: !Ref ClusterRouteTable
      
  ClusterSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref ClusterVPC
      MapPublicIpOnLaunch: false
      CidrBlock: 10.0.144.0/20
      AvailabilityZone: !Select
        - '1'
        - !GetAZs ''
      Tags:
        - Key: Name
          Value: SlurmSubnetB

  ClusterSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref ClusterSubnetB
      RouteTableId: !Ref ClusterRouteTable
          
  ClusterSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref ClusterVPC
      MapPublicIpOnLaunch: false
      CidrBlock: 10.0.160.0/20
      AvailabilityZone: !Select
        - '2'
        - !GetAZs ''
      Tags:
        - Key: Name
          Value: SlurmSubnetC

  ClusterSubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref ClusterSubnetC
      RouteTableId: !Ref ClusterRouteTable

  ClusterSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow all local traffic
      VpcId: !Ref ClusterVPC

  ClusterSGIngressRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
        GroupId: !Ref ClusterSG
        IpProtocol: -1
        FromPort: 1
        ToPort: 65535
        SourceSecurityGroupId: !GetAtt ClusterSG.GroupId

  SlurmHeadRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
            - Effect: Allow
              Principal:
                Service:
                - 'ec2.amazonaws.com'
              Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
      - PolicyName: SlurmS3
        PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                  - 's3:ListBucket'
                Resource: '*'
      - PolicyName: SlurmEC2
        PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'ec2:*'
                Resource: '*'
      - PolicyName: SlurmIAM
        PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'iam:*'
                Resource: '*'

  SlurmHeadProfile:
    DependsOn: SlurmHeadRole
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref SlurmHeadRole

  SlurmComputeRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
            - Effect: Allow
              Principal:
                Service:
                - 'ec2.amazonaws.com'
              Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
      - PolicyName: SlurmEC2
        PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'ec2:DescribeTags'
                Resource: '*'

  SlurmComputeProfile:
    DependsOn: SlurmComputeRole
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref SlurmComputeRole

  SlurmEFS:        
    Type: AWS::EFS::FileSystem
    Properties: 
      Encrypted: true
      FileSystemTags: 
        - Key: Name
          Value: SlurmEFS
      PerformanceMode: generalPurpose
      ThroughputMode: bursting
    
  SlurmMountTargetA: 
    Type: AWS::EFS::MountTarget
    Properties: 
      FileSystemId: !Ref SlurmEFS
      SubnetId: !Ref ClusterSubnetA
      SecurityGroups: 
        - !Ref ClusterSG

  SlurmMountTargetB: 
    Type: AWS::EFS::MountTarget
    Properties: 
      FileSystemId: !Ref SlurmEFS
      SubnetId: !Ref ClusterSubnetB
      SecurityGroups: 
        - !Ref ClusterSG
      
  SlurmMountTargetC: 
    Type: AWS::EFS::MountTarget
    Properties: 
      FileSystemId: !Ref SlurmEFS
      SubnetId: !Ref ClusterSubnetC
      SecurityGroups: 
        - !Ref ClusterSG

  HomeEFS:        
    Type: AWS::EFS::FileSystem
    Properties: 
      Encrypted: true
      FileSystemTags: 
        - Key: Name
          Value: HomeEFS
      PerformanceMode: generalPurpose
      ThroughputMode: bursting
    
  HomeMountTargetA: 
    Type: AWS::EFS::MountTarget
    Properties: 
      FileSystemId: !Ref HomeEFS
      SubnetId: !Ref ClusterSubnetA
      SecurityGroups: 
        - !Ref ClusterSG

  HomeMountTargetB: 
    Type: AWS::EFS::MountTarget
    Properties: 
      FileSystemId: !Ref HomeEFS
      SubnetId: !Ref ClusterSubnetB
      SecurityGroups: 
        - !Ref ClusterSG
      
  HomeMountTargetC: 
    Type: AWS::EFS::MountTarget
    Properties: 
      FileSystemId: !Ref HomeEFS
      SubnetId: !Ref ClusterSubnetC
      SecurityGroups: 
        - !Ref ClusterSG

  SlurmS3Endpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      RouteTableIds:
        - !Ref ClusterRouteTable
      ServiceName: !Sub com.amazonaws.${AWS::Region}.s3
      VpcId: !Ref ClusterVPC

  SlurmManagementElasticIP:
    Type: AWS::EC2::EIP
    DependsOn: SlurmManagementEC2
    Properties:
      InstanceId: !Ref SlurmManagementEC2
      
  SlurmLoginElasticIP:
    Type: AWS::EC2::EIP
    DependsOn: SlurmLoginEC2
    Condition: LoginEnabled
    Properties:
      InstanceId: !Ref SlurmLoginEC2
      
  SlurmMgmtEC2WaitCondition:
    Type: AWS::CloudFormation::WaitCondition
    CreationPolicy:
      ResourceSignal:
        Timeout: PT30M
        Count: 1

  SlurmLoginEC2WaitCondition:
    Type: AWS::CloudFormation::WaitCondition
    Condition: LoginEnabled
    CreationPolicy:
      ResourceSignal:
        Timeout: PT30M
        Count: 1

  SlurmManagementEC2:
    DependsOn: SlurmEFS
    Type: AWS::EC2::Instance
    Properties:
      AvailabilityZone: !GetAtt ClusterPublicSubnet.AvailabilityZone
      IamInstanceProfile: !Ref SlurmHeadProfile
      ImageId: !Ref HeadAMI
      InstanceType: !Ref HeadInstanceType
      KeyName: !Ref KeyName
      SubnetId: !Ref ClusterPublicSubnet
      SecurityGroupIds: [ !Ref ClusterSG , !Ref ExternalAccessSG ]
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 340
            DeleteOnTermination: true
            VolumeType: gp2
      Tags:
        - Key: Name
          Value: SLURM-Controller
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
          hostname slurm-controller
          echo slurm-controller > /etc/hostname
          sed -i "s|enforcing|disabled|g" /etc/selinux/config
          setenforce 0
          
          usermod -d /centos-home -m centos
          
          mkdir -p /cluster
          
          cat <<EOF >> /etc/fstab
          ${SlurmEFS}:/  /cluster  efs  defaults,_netdev,fsc 0 0
          ${HomeEFS}:/  /home  efs  defaults,_netdev,fsc 0 0
          EOF
          mount -a
          
          usermod -d /home/centos -m centos
          
          mkdir -p /cluster/shared
          export SHARED=/cluster/shared
          
          aws s3 cp ${S3Bucket}/slurm-mgmtd.sh $SHARED/slurm-mgmtd.sh
          aws s3 cp ${S3Bucket}/slurm-aws-startup.sh $SHARED/slurm-aws-startup.sh
          aws s3 cp ${S3Bucket}/slurm-aws-shutdown.sh $SHARED/slurm-aws-shutdown.sh
          aws s3 cp ${S3Bucket}/slurm-compute.sh $SHARED/slurm-compute.sh
          aws s3 cp ${S3Bucket}/slurm-login.sh $SHARED/slurm-login.sh
          sed -i "s|@SUBNETID1@|${ClusterSubnetA}|g" $SHARED/slurm-aws-startup.sh
          sed -i "s|@SUBNETID2@|${ClusterSubnetB}|g" $SHARED/slurm-aws-startup.sh
          sed -i "s|@SUBNETID3@|${ClusterSubnetC}|g" $SHARED/slurm-aws-startup.sh
          sed -i "s|@BASEAMI@|${ComputeAMI}|g" $SHARED/slurm-aws-startup.sh
          sed -i "s|@KEYNAME@|${KeyName}|g" $SHARED/slurm-aws-startup.sh
          sed -i "s|@S3BUCKET@|${S3Bucket}|g" $SHARED/slurm-aws-startup.sh
          sed -i "s|@COMPUTESG@|${ClusterSG}|g" $SHARED/slurm-aws-startup.sh
          sed -i "s|@PROFILE@|${SlurmComputeProfile}|g" $SHARED/slurm-aws-startup.sh
          sed -i "s|@EFS_HOME@|${HomeEFS}|g" $SHARED/slurm-compute.sh
          sed -i "s|@EFS_SLURM@|${SlurmEFS}|g" $SHARED/slurm-compute.sh
          chmod +x $SHARED/slurm-mgmtd.sh
          # . $SHARED/slurm-mgmtd.sh
          cfn-signal -e $? --stack ${AWS::StackName} --resource SlurmMgmtEC2WaitCondition --region ${AWS::Region}

  SlurmLoginEC2:
    DependsOn: SlurmMgmtEC2WaitCondition
    Condition: LoginEnabled
    Type: AWS::EC2::Instance
    Properties:
      AvailabilityZone: !GetAtt ClusterPublicSubnet.AvailabilityZone
      ImageId: !Ref LoginAMI
      InstanceType: !Ref LoginInstanceType
      KeyName: !Ref KeyName
      SubnetId: !Ref ClusterPublicSubnet
      SecurityGroupIds: [ !Ref ClusterSG , !Ref ExternalAccessSG ]
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 340
            DeleteOnTermination: true
            VolumeType: gp2
      Tags:
        - Key: Name
          Value: SLURM-Login
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
          hostname slurm-login
          echo slurm-login > /etc/hostname
          sed -i "s|enforcing|disabled|g" /etc/selinux/config
          setenforce 0
          
          usermod -d /centos-home -m centos
          
          mkdir -p /cluster
          
          cat <<EOF >> /etc/fstab
          ${SlurmEFS}:/  /cluster  efs  defaults,_netdev,fsc 0 0
          ${HomeEFS}:/  /home  efs  defaults,_netdev,fsc 0 0
          EOF
          mount -a

          chmod 1777 /cluster
          chmod 1777 /home
          
          usermod -d /home/centos centos
          
          export SHARED=/cluster/shared

          chmod +x $SHARED/slurm-login.sh
          # . $SHARED/slurm-login.sh
          cfn-signal -e $? --stack ${AWS::StackName} --resource SlurmLoginEC2WaitCondition --region ${AWS::Region}

Outputs:
  SlurmManagementPublicIP:
    Description: Slurm Management Endpoint
    Value: !GetAtt SlurmManagementEC2.PublicIp
    
  SlurmManagementPrivateIP:
    Description: Slurm Management Endpoint
    Value: !GetAtt SlurmManagementEC2.PrivateIp

  SlurmLoginPublicIP:
    Description: Slurm Login Endpoint
    Condition: LoginEnabled
    Value: !GetAtt SlurmLoginEC2.PublicIp
    
  SlurmLoginPrivateIP:
    Description: Slurm Login Endpoint
    Condition: LoginEnabled
    Value: !GetAtt SlurmLoginEC2.PrivateIp
