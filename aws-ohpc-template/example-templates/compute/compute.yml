AWSTemplateFormatVersion: 2010-09-09
Description: Networking components for an example cluster

Parameters:

  AllocateLoginNode:
    Description: Specify whether to create a login node
    Default: FALSE
    Type: String
    AllowedValues:
      - TRUE
      - FALSE

  KeyName:
    Description: The EC2 Key Pair to allow SSH access to the instances
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: Must be the name of an existing EC2 KeyPair.
    Default: HP-Ubuntu

  HeadAMI:
    Description: AMI to use for controller instance.
    Type: String
    Default: ami-0ada4ff0364c46f55

  HeadInstanceType:
    Description: Instance type to be used for the SLURM controller instance.
    Type: String
    Default: t3.large
    AllowedValues:
      - t3.large
      - c5.large
      - m5.large
      - r5.large

  LoginAMI:
    Description: AMI to use for login instance.
    Type: String
    Default: ami-0ab5e5fb448b57117

  LoginInstanceType:
    Description: Instance type to be used for the SLURM login instance.
    Type: String
    Default: t3.large
    AllowedValues:
      - t3.large
      - c5.large
      - m5.large
      - r5.large

Conditions:

  LoginEnabled:
    !Equals [ !Ref AllocateLoginNode, TRUE ]

Resources:

  ClusterVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 192.168.0.0/16
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value: SLURM cluster VPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: SlurmClusterInternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref ClusterVPC
      InternetGatewayId: !Ref InternetGateway

  ClusterRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref ClusterVPC
      Tags:
        - Key: Name
          Value: ClusterRouteTable
          
  ExternalRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref ClusterVPC
      Tags:
        - Key: Name
          Value: ExternalRouteTable

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref ExternalRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  ClusterEC2NATRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref ClusterRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      InstanceId: !Ref SlurmManagementEC2

  ExternalAccessSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow SSH Access to instances
      VpcId: !Ref ClusterVPC
      SecurityGroupIngress:
        IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: SSHAccessSecurityGroup

  ClusterPublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref ClusterVPC
      MapPublicIpOnLaunch: false
      CidrBlock: 192.168.0.0/24
      AvailabilityZone: !Select
        - '0'
        - !GetAZs ''
      Tags:
        - Key: Name
          Value: SLURM Public Subnet
          
  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref ClusterPublicSubnet
      RouteTableId: !Ref ExternalRouteTable

  ClusterSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref ClusterVPC
      MapPublicIpOnLaunch: false
      CidrBlock: 192.168.1.0/24
      AvailabilityZone: !Select
        - '0'
        - !GetAZs ''
      Tags:
        - Key: Name
          Value: SlurmSubnetA

  ClusterSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref ClusterSubnetA
      RouteTableId: !Ref ClusterRouteTable
      
  ClusterSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow all local traffic
      VpcId: !Ref ClusterVPC

  ClusterSGIngressRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
        GroupId: !Ref ClusterSG
        IpProtocol: -1
        FromPort: 1
        ToPort: 65535
        SourceSecurityGroupId: !GetAtt ClusterSG.GroupId

  SlurmManagementElasticIP:
    Type: AWS::EC2::EIP
    DependsOn: SlurmManagementEC2
    Properties:
      InstanceId: !Ref SlurmManagementEC2

  SlurmLoginElasticIP:
    Type: AWS::EC2::EIP
    DependsOn: SlurmLoginEC2
    Condition: LoginEnabled
    Properties:
      InstanceId: !Ref SlurmLoginEC2

  SlurmManagementEC2:
    Type: AWS::EC2::Instance
    Properties:
      AvailabilityZone: !GetAtt ClusterPublicSubnet.AvailabilityZone
      ImageId: !Ref HeadAMI
      InstanceType: !Ref HeadInstanceType
      KeyName: !Ref KeyName
      SubnetId: !Ref ClusterPublicSubnet
      SecurityGroupIds: [ !Ref ClusterSG , !Ref ExternalAccessSG ]
      SourceDestCheck: False
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 340
            DeleteOnTermination: true
            VolumeType: gp2
      Tags:
        - Key: Name
          Value: SLURM-Controller
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
          hostname slurm-controller
          echo slurm-controller > /etc/hostname
          sed -i "s|enforcing|disabled|g" /etc/selinux/config
          setenforce 0

  SlurmLoginEC2:
    Condition: LoginEnabled
    Type: AWS::EC2::Instance
    Properties:
      AvailabilityZone: !GetAtt ClusterPublicSubnet.AvailabilityZone
      ImageId: !Ref LoginAMI
      InstanceType: !Ref LoginInstanceType
      KeyName: !Ref KeyName
      SubnetId: !Ref ClusterPublicSubnet
      SecurityGroupIds: [ !Ref ClusterSG , !Ref ExternalAccessSG ]
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 340
            DeleteOnTermination: true
            VolumeType: gp2
      Tags:
        - Key: Name
          Value: SLURM-Login
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
          hostname slurm-login
          echo slurm-login > /etc/hostname
          sed -i "s|enforcing|disabled|g" /etc/selinux/config
          setenforce 0

Outputs:
  SlurmManagementPublicIP:
    Description: Slurm Management Endpoint
    Value: !GetAtt SlurmManagementEC2.PublicIp

  SlurmManagementPrivateIP:
    Description: Slurm Management Endpoint
    Value: !GetAtt SlurmManagementEC2.PrivateIp

  SlurmLoginPublicIP:
    Description: Slurm Login Endpoint
    Condition: LoginEnabled
    Value: !GetAtt SlurmLoginEC2.PublicIp

  SlurmLoginPrivateIP:
    Description: Slurm Login Endpoint
    Condition: LoginEnabled
    Value: !GetAtt SlurmLoginEC2.PrivateIp
