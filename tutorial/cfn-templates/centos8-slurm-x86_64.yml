AWSTemplateFormatVersion: 2010-09-09
Description: Complete AWS SLURM Cluster

Parameters:

  AllocateLoginNode:
    Description: Specify whether to create a login node
    Default: FALSE
    Type: String
    AllowedValues:
      - TRUE
      - FALSE

  KeyName:
    Description: The EC2 Key Pair to allow SSH access to the instance
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: Must be the name of an existing EC2 KeyPair.
    Default: cluster-sc20

  
  HeadAMI:
    Description: AMI to use for head node.
    Type: String
    Default: ami-0ef4818da616a7c39


  HeadInstanceType:
    Description: Instance type to be used for Slurm Headnode/Management Node.
    Type: String
    Default: t3.2xlarge
    AllowedValues:
      - t3.micro
      - t3.2xlarge

  LoginAMI:
    Description: AMI to use for login node.
    Type: String
    Default: EX1-AMI

  LoginInstanceType:
    Description: Instance type to be used for Slurm Headnode/Management Node.
    Type: String
    Default: t3.2xlarge
    AllowedValues:
      - t3.micro
      - t3.2xlarge

  ComputeAMI:
    Description: AMI to use for compute nodes.
    Type: String
    Default: EX1-AMI
    
Conditions:

  LoginEnabled:
    !Equals [ !Ref AllocateLoginNode, TRUE ]

Resources:

  ClusterVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 192.168.0.0/16
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value: SLURM cluster VPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: SlurmClusterInternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref ClusterVPC
      InternetGatewayId: !Ref InternetGateway

  ClusterRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref ClusterVPC
      Tags:
        - Key: Name
          Value: ClusterRouteTable
          
  ExternalRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref ClusterVPC
      Tags:
        - Key: Name
          Value: ExternalRouteTable

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref ExternalRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  ClusterEC2NATRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref ClusterRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      InstanceId: !Ref SlurmManagement

  ExternalAccessSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow SSH Access to Instance
      VpcId: !Ref ClusterVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '8787'
          ToPort: '8787'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '8888'
          ToPort: '8888'
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: ExternalAccessSecurityGroup

  ClusterPublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref ClusterVPC
      MapPublicIpOnLaunch: false
      CidrBlock: 192.168.0.0/24
      AvailabilityZone: !Select
        - '0'
        - !GetAZs ''
      Tags:
        - Key: Name
          Value: SlurmPublicSubnet
          
  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref ClusterPublicSubnet
      RouteTableId: !Ref ExternalRouteTable

  ClusterComputeSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref ClusterVPC
      MapPublicIpOnLaunch: false
      CidrBlock: 192.168.1.0/24
      AvailabilityZone: !Select
        - '0'
        - !GetAZs ''
      Tags:
        - Key: Name
          Value: SlurmComputeSubnet

  ClusterComputeSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref ClusterComputeSubnet
      RouteTableId: !Ref ClusterRouteTable
      
  ClusterSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow all local traffic
      VpcId: !Ref ClusterVPC

  ClusterSGIngressRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
        GroupId: !Ref ClusterSG
        IpProtocol: -1
        SourceSecurityGroupId: !GetAtt ClusterSG.GroupId

  ClusterSGLocalEgressRule:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
        GroupId: !Ref ClusterSG
        IpProtocol: -1
        DestinationSecurityGroupId: !GetAtt ClusterSG.GroupId

  ClusterSGExternalEgressRule:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
        GroupId: !Ref ClusterSG
        IpProtocol: -1
        CidrIp: 0.0.0.0/0

  SlurmHeadRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
            - Effect: Allow
              Principal:
                Service:
                - 'ec2.amazonaws.com'
              Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
      - PolicyName: SlurmEC2
        PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'ec2:RunInstances'
                Resource:
                 - !Sub 'arn:aws:ec2:${AWS::Region}::image/ami-*'
                 - !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:instance/*'
                 - !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:security-group/*'
                 - !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:volume/*'
                 - !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:subnet/*'
                 - !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:placement-group/*'
                 - !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:key-pair/*'
                 - !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:network-interface/*'
              - Effect: Allow
                Action: 'ec2:CreateTags'
                Resource: '*'
                Condition:
                  StringEquals:
                    'ec2:CreateAction': 'RunInstances'
              - Effect: Allow
                Action: 'ec2:Describe*'
                Resource: '*'
              - Effect: Allow
                Action: 'ec2:TerminateInstances'
                Resource: !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:instance/*'

  SlurmHeadProfile:
    DependsOn: SlurmHeadRole
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref SlurmHeadRole

  SlurmS3Endpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      RouteTableIds:
        - !Ref ClusterRouteTable
      ServiceName: !Sub com.amazonaws.${AWS::Region}.s3
      VpcId: !Ref ClusterVPC

  SlurmManagementElasticIP:
    Type: AWS::EC2::EIP
    DependsOn: SlurmManagement
    Properties:
      InstanceId: !Ref SlurmManagement
      
  SlurmLoginElasticIP:
    Type: AWS::EC2::EIP
    DependsOn: SlurmLogin
    Condition: LoginEnabled
    Properties:
      InstanceId: !Ref SlurmLogin
      
  SlurmManagement:
    Type: AWS::EC2::Instance
    Properties:
      AvailabilityZone: !GetAtt ClusterPublicSubnet.AvailabilityZone
      IamInstanceProfile: !Ref SlurmHeadProfile
      ImageId: !Ref HeadAMI
      InstanceType: !Ref HeadInstanceType
      KeyName: !Ref KeyName
      SubnetId: !Ref ClusterPublicSubnet
      PrivateIpAddress: 192.168.0.100
      SecurityGroupIds: [ !Ref ClusterSG , !Ref ExternalAccessSG ]
      SourceDestCheck: false
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 340
            DeleteOnTermination: true
            VolumeType: gp2
      Tags:
        - Key: Name
          Value: SlurmManagement
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
          sed -i "s|SELINUX=enforcing|SELINUX=permissive|g" /etc/selinux/config
          setenforce 0
          echo "net.ipv4.ip_forward = 1" > /etc/sysctl.d/ip_forward.conf
          sysctl -w net.ipv4.ip_forward=1
          dnf -y install iptables-services
          iptables -t nat -A POSTROUTING -o eth0 -s 192.168.0.0/16 -j MASQUERADE
          service iptables save
          systemctl start iptables
          systemctl enable iptables
          echo "/home *(rw,no_subtree_check,fsid=10,no_root_squash)" >> /etc/exports
          echo "/opt/ohpc/pub *(ro,no_subtree_check,fsid=11)" >> /etc/exports
          exportfs -a
          systemctl restart nfs-server
          systemctl enable nfs-server
          su - centos -c "ssh-keygen -q -t rsa -N '' <<< ""$'\n'"y" 2>&1 >/dev/null"
          su - centos -c "cat ~/.ssh/id_rsa.pub >> ~/.ssh/authorized_keys"
          curl https://raw.githubusercontent.com/utdsimmons/sc2020/master/conf/slurm.conf > /etc/slurm/slurm.conf
          curl https://raw.githubusercontent.com/utdsimmons/sc2020/master/conf/slurm-aws-startup.sh > /etc/slurm/slurm-aws-startup.sh
          curl https://raw.githubusercontent.com/utdsimmons/sc2020/master/conf/slurm-aws-shutdown.sh > /etc/slurm/slurm-aws-shutdown.sh
          curl https://raw.githubusercontent.com/utdsimmons/sc2020/master/conf/slurm-compute-userdata.sh > /etc/slurm/slurm-compute-userdata.sh
          sed -i "s|@COMPUTESG@|${ClusterSG}|g" /etc/slurm/slurm-aws-startup.sh
          sed -i "s|@SUBNETID@|${ClusterComputeSubnet}|g" /etc/slurm/slurm-aws-startup.sh
          sed -i "s|@COMPUTEAMI@|${ComputeAMI}|g" /etc/slurm/slurm-aws-startup.sh
          sed -i "s|@KEYNAME@|${KeyName}|g" /etc/slurm/slurm-aws-startup.sh
          chmod +x /etc/slurm/slurm-aws-startup.sh
          chmod +x /etc/slurm/slurm-aws-shutdown.sh
          systemctl start munge
          systemctl enable munge
          cp /etc/munge/munge.key /home/.munge
          systemctl start slurmctld
          systemctl enable slurmctld
          cp /etc/slurm/slurm.conf /home/.slurmconf
          touch /etc/slurm/power_save.log
          chown slurm:slurm /etc/slurm/power_save.log

  SlurmLogin:
    Condition: LoginEnabled
    DependsOn: SlurmManagement
    Type: AWS::EC2::Instance
    Properties:
      AvailabilityZone: !GetAtt ClusterPublicSubnet.AvailabilityZone
      ImageId: !Ref LoginAMI
      InstanceType: !Ref LoginInstanceType
      KeyName: !Ref KeyName
      SubnetId: !Ref ClusterPublicSubnet
      PrivateIpAddress: 192.168.0.200
      SecurityGroupIds: [ !Ref ClusterSG , !Ref ExternalAccessSG ]
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 10
            DeleteOnTermination: true
            VolumeType: gp2
      Tags:
        - Key: Name
          Value: SlurmLogin
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
          sed -i "s|SELINUX=enforcing|SELINUX=disabled|g" /etc/selinux/config
          setenforce 0
          sleep 180
          echo "192.168.0.100:/home /home nfs nfsvers=3,nodev,nosuid 0 0" >> /etc/fstab
          echo "192.168.0.100:/opt/ohpc/pub /opt/ohpc/pub nfs nfsvers=3,nodev 0 0" >> /etc/fstab
          mount -a
          cp /home/.slurmconf /etc/slurm/slurm.conf
          cp /home/.munge /etc/munge/munge.key
          chown munge:munge /etc/munge/munge.key
          systemctl start munge
          systemctl enable munge


Outputs:
  SlurmManagementPublicIP:
    Description: Slurm Management Endpoint
    Value: !GetAtt SlurmManagement.PublicIp
    
  SlurmManagementPrivateIP:
    Description: Slurm Management Endpoint
    Value: !GetAtt SlurmManagement.PrivateIp

  SlurmLoginPublicIP:
    Description: Slurm Login Endpoint
    Condition: LoginEnabled
    Value: !GetAtt SlurmLogin.PublicIp
    
  SlurmLoginPrivateIP:
    Description: Slurm Login Endpoint
    Condition: LoginEnabled
    Value: !GetAtt SlurmLogin.PrivateIp
